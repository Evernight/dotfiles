[alias]
	# View abbreviated SHA, description, and history graph
    slog = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    l = !git --no-pager log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative -n 50
    # simple aliases
    b = branch
    mt = mergetool
    co = checkout
    up = checkout
    # reset
    hard = reset --hard HEAD
	# View the current working tree status using the short format
	s = status -sb
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
    #p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
    #c = clone --recursive
	# Commit all changes
    #ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
    #tags = tag -l
    #branches = branch -a
    #remotes = remote -v
	# Credit an author on the latest commit
    #credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
    #reb = "!r() { git rebase -i HEAD~$1; }; r"
    # diff with parent revision
    dr = !git --no-pager diff --name-status HEAD HEAD~1 --color
    # amend
    amen = commit --amen -a --no-edit
    ramen = commit --amen --no-edit
    # pull
    get = pull --rebase origin master
    # revert files
    rev = checkout HEAD
    reve = checkout HEAD~1
    # go to master
    om = checkout origin/master

    # stash operations
    # http://stackoverflow.com/questions/11269256/how-to-name-and-retrieve-a-stash-by-name-in-git
    sshow = "!f() { git stash show stash^{/$*} -p; }; f"
    sapply = "!f() { git stash apply stash^{/$*}; }; f"

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	whitespace = trailing-space
	trustctime = false
	preloadindex = true
	fscache = true
    #pager = cat

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = diffconflicts
	conflictstyle = diff3

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = matching
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[mergetool]
	prompt = false
[mergetool "diffconflicts"]
    #cmd = ~/dotfiles/bin/diffconflicts vim $BASE $LOCAL $REMOTE $MERGED
    cmd = ~/dotfiles/bin/mydiffconflicts vim $BASE $LOCAL $REMOTE $MERGED
    #cmd = vimdiff $MERGED $LOCAL $REMOTE
	trustExitCode = true
[user]
	email = vasily.medyanikov@oculus.com
	name = Vasily Medyanikov
[gc]
	auto = 256
