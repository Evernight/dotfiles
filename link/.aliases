# Easier navigation: .., ..., ...., ....., ~ and -
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

alias hgs="~/dotfiles/scripts/hg-full-status.sh"
alias vgd="~/dotfiles/bin/vimdiffgit.sh"

# Usage: ls -1 | xgs "hg log %% | tail -n 4"
#alias xgs="xargs -d'\n' -I %% sh -c "

# Mac-only
#function sed() {
#    gsed $@
#}

function xgs() {
    command="$@";
    xargs -d'\n' -I %% sh -c $command;
}

# Find file containing $1 somewhere in name in current folder
function _fs() {
    find . -iname "*$1*";
}
alias fs='noglob _fs '

# Like above but get the absolute path instead of relative
function _fsf() {
    _fs $@ | xgs readlink -f %%
}
alias fsf='noglob _fsf '

# quickly grep in current folder
function gs() {
    egrep -irI "$@" .;
}

function gsb() {
    egrep -ir "$@" .;
}

function cb() {
    content="";
    while read line;
    do
        content+="$line\n";
    done
    echo -n "${content: : -2}" > /dev/clipboard
}

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
	colorflag="--color"
else # OS X `ls`
	colorflag="-G"
fi

# List all files colorized in long format, including dot files
alias la="ls -laF ${colorflag}"

# List only directories
alias lsd='ls -lF ${colorflag} | grep "^d"'

# Always use color output for `ls`
#alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Enable aliases to be sudoâ€™ed
alias sudo='sudo '

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Arcanist
alias ql='arc lint --severity warning --never-apply-patches'
alias ardi='arc diff --allow-untracked '
alias ardio='arc diff --allow-untracked --only '
alias ardip='arc diff --allow-untracked --prepare '

if [[ $SHELL == "/bin/bash" ]] then
    # Ctrl+G to delete last word from the filepath
    bind '"\C-g": unix-filename-rubout'

    alias ls="gls --color=auto"
fi

## Android development

# Run before starting app on the phone. Cleans up the log and starts capturing them until interrupted with Ctrl+C
function lcpre() {  
    trap 'echo "stopped writing logs";' INT;
    fname=`date "+$1%Y-%m-%d_%H:%M:%S.logcat"`; 
    adb logcat -c;
    echo "Logcat cleared";
    #adb logcat -v time > "$fname"; 
    adb logcat | grep -v "RestrictionPolicy: userId: 0" > "$fname"; 
    echo "Logs saved to $fname" ;
    trap - INT;
    dos2unix -f "$fname"
    open "$fname"
}

# Clean logcat
function lcclean() {
    best_device=`adb_best_device`
    adb -s $best_device logcat -c;
}

# Quickly capture logcat, save into a file and open with Sublime
function lcpost() {
    best_device=`adb_best_device`
    echo "Grabbing the logs";
    fname=`date "+$1%Y-%m-%d_%H:%M:%S.logcat"`;
    adb -s $best_device logcat -d | grep -v "RestrictionPolicy: userId: 0" > "$fname";
    echo "Logs saved to $fname" ;
    dos2unix -f "$fname"
    cygstart "$fname"
}

# Fix logcat files in format that does not support Sublime highlighting
function fixlc() {
    cat $1 | sed -E 's/(\S+?)\s+(\S+?)\s+(\S+?)\s+\S+?\s+(\S+?)\s+(\S+?)\s*: (.*)/\1 \2 \4\/\5\t(\3): \6/' > out.logcat && open out.logcat
}

# If the phone connected both locally and remotely, get local one
function adb_best_device() {
    remote=`adb devices | sed -n 's/\([0-9\.]*:[0-9]\+\).*/\1/p'`
    local=`adb devices | sed -nr 's/^([0-9a-zA-Z]+)\s+device.*/\1/p'`
    if [[ -n $local && -n $remote ]] then
       echo "Both local ($local) and remote ($remote) connected" >&2
    fi
    if [[ -n $local ]] then
       echo "$local"
       return 0
    fi
    if [[ -n $remote ]] then
       echo "$remote"
       return 0
    fi
    return 1
}

# Connect to the phone over wi-fi
function adbcon() {
    adbdis;
    ip=`adb shell ifconfig wlan0 | grep 'inet addr' | sed 's/.*inet addr:\([0-9\.]*\).*/\1/'`
    adb tcpip 5555 &&
    adb connect $ip:5555
}

# Disconnect from the phone wi-fi
function adbdis() {
    adb disconnect
}

function adbcondev() {
    device=$1;
    echo "Connecting $device";
    ip=`adb -s $device shell ifconfig wlan0 | grep 'inet addr' | sed 's/.*inet addr:\([0-9\.]*\).*/\1/'`;
    echo "ip=$ip"
    adb -s $device tcpip 5555;
    adb -s $device connect $ip:5555;
    echo ""
}

function adbconall() {
    local_devices=($(adb devices | sed -nr 's/^([0-9a-zA-Z]+)\s+device$/\1/p'))
    for device in $local_devices; do 
        adbcondev $device;
    done
}

# Run Rooms on the device
function rrooms() {
    best_device=$2;
    if [[ -z "$best_device" ]]; then
        best_device=`adb_best_device`;
    fi
    adb -s $best_device shell am force-stop com.oculus.rooms && adb -s $best_device shell am start -n com.oculus.rooms/com.oculus.rooms.RoomsActivity
}

# Windows
alias subl='/cygdrive/c/Program\ Files/Sublime\ Text\ 3/sublime_text.exe'

function printargs() {
    for arg in $@
    do
        echo $arg;
    done
}

function runonargs() {
    cmd=$1
    shift
    for arg in $@
    do
        $cmd $arg;
    done
}

# fpp 
#alias fpp=~/dotfiles/external/PathPicker/fpp

#function so() {
#    if [ $# -eq 0 ];
#    then
#        $(fc -ln -1) | fpp -c printargs
#    else
#        $(fc -ln -1) | fpp -c printargs | xgs "$@"
#    fi
#}

function so() {
    if [ $# -eq 0 ];
    then
        $(fc -ln -1) | fpp -c printargs
    else
        $(fc -ln -1) | fpp -c runonargs $@;
    fi
}

function cpar() {
   cp --parent -r $@
}

# ZSH global aliases
alias -g OM=origin/master

alias magick='/cygdrive/c/Program\ Files/ImageMagick-7.0.5-Q16/magick.exe'
alias inrooms='adb shell am force-stop com.oculus.horizon && adb shell am force-stop com.oculus.home && adb uninstall com.oculus.rooms && adb install -r '
alias lastrooms='inrooms /home/slowbro/oculus-social-hub/Main/Temp/StagingArea/Package.apk'

# Replace corresponding oackage on the phone with the given apk. No bullshit errors.
function adbreplace() {
    best_device=$2;
    if [[ -z "$best_device" ]]; then
        best_device=`adb_best_device`;
    fi
    package=$(aapt dump badging $1 | awk '/package/{gsub("name=|'"'"'","");  print $2}')
    echo "Package: $package"
    echo "Uninstalling"
    echo "adb -s $best_device uninstall $package"
    adb -s $best_device uninstall $package &&
    adb -s $best_device install $1 | awk 1 ORS='\r' &&
    echo "                                                                                   " &&
    echo "Success!"
}

function adbreplaceall() {
    local_devices=($(adb devices | sed -nr 's/^([0-9a-zA-Z]+)\s+device$/\1/p'))
    for device in $local_devices; do 
        echo "Replace for $device"
        adbreplace $1 $device;
    done
}

function adbstopall() {
    local_devices=($(adb devices | sed -nr 's/^([0-9a-zA-Z]+)\s+device$/\1/p'))
    for device in $local_devices; do 
        echo "Stop for $device"
        adb -s $device shell am force-stop com.oculus.rooms
    done
}

# Get package name and version from the apk file
function apkver() {
    package=$(aapt dump badging "$1" | awk '/package/{gsub("name=|'"'"'","");  print $2}')
    version=$(aapt dump badging "$1" | awk '/package/{gsub("versionName=|'"'"'","");  print $4}')
    echo "Package: $package"
    echo "Version: $version"
}

function adbfresh() {
    latest=$( ls -t *.apk | head -1 );
    echo "Latest file is $latest"
    ls -laF ${colorflag} $latest
    adbreplace $latest;
    lcclean;
}

# Given .meta file, find all prefabs in current folder referencing the corresponding script/item
function metaref() {
    filename=$1
    if ! [[ -e $1 ]];
    then
        filename=`fs $1.prefab.meta | grep prefab.meta`
        linescount=`echo $filename | wc -l`
        if [[ $linescount -gt 1 ]];
        then
            echo "Too many files matching"
            echo $filename
            return 1
        fi
    fi
    guid=`cat $filename | grep guid | sed -E 's/guid: (.*)/\1/'`;
    echo "Looking for references to $filename ($guid)"
    gs $guid
}

function replacefile() {
    filename=`basename $1`
    toreplace=`find $2 -iname $filename`
    linescount=`echo $toreplace | wc -l`
    if [[ $linescount -gt 1 ]];
    then
        echo "Too many files matching"
        echo $toreplace
        return 1
    fi
    echo "Replacing $toreplace with $1"
    cp $1 $toreplace
}

function gitblamediff() {
    prev=$(mktemp /tmp/git-blame-prev.XXXXXX)
    cur=$(mktemp /tmp/git-blame-cur.XXXXXX)
    git blame --date=short -c $1 $2 | sed -re 's/[0-9]+\)//g' | grep $3 > $prev
    git blame --date=short -c HEAD $2 | sed -re 's/[0-9]+\)//g' | grep $3 > $cur
    diff -u $prev $cur
}

#alias sch='NAME=$(date +%Y%m%d%H%M%S) && mkdir -p /Users/$USER/screenshots && adb shell screencap -p | perl -pe "s/\x0D\x0A/\x0A/g" > "/Users/$USER/screenshots/$NAME.png" && convert -crop 1280x1440+0x0 "/Users/$USER/screenshots/$NAME.png" "/Users/$USER/screenshots/$NAME.png"'

alias wudo="cygstart --action=runas "

alias rdh='adb logcat -c && yarn gulp vrshell:run:react -- --hot 1 --dev 1 --chrome 1 --webby 1 --app'

alias sch='NAME=$(date +%Y%m%d%H%M%S) && adb shell screencap -p | perl -pe "s/\x0D\x0A/\x0A/g" > "/Users/$USER/screenshots/$NAME.png" && convert -crop 1280x1440+0x0 "/Users/$USER/screenshots/$NAME.png" "/Users/$USER/screenshots/$NAME.png"'

up() {
  local directory="$PWD"
  local slashes="${directory//[^\/]/}"
  for (( n=${#slashes}; n > 0; --n )); do
    directory="${directory%/*}"
    if [[ -e "$directory/package.json" ||
          -d "$directory/.git" ||
          -d "$directory/.hg" ]]; then
      cd "$directory" && return
    fi
  done
}

systracerooms() {
  /Users/slowbro/fbsource/fbandroid/scripts/fbsystrace/fbsystrace -e 172.16.167.98:5555 -b 5120 -t 15 -o $1 -a com.oculus.rooms --no-clear-tags gfx view sched --fb-categories react_apps react_cxx_bridge react_java_bridge react_js_bridge react_js_infra react_view --no-kill --no-launch --no-drop-pagecache --droidinfo
}

alias pick='sh -c "$(fc -ln | tail -n 1)" | fpp -ai'

hgsl() {
    hg slog --hidden --rev "$(sh hg-reflog-line.sh)|.~5::." --template "{label('custom.hash',node|short)} \033[0;33m{branches}{bookmarks}{tags}\033[0m {desc|firstline}\n{label('custom.time', date|age)} ({label('custom.time', date|isodate)) {label('custom.user', author|person)}\n\n" | less
}

alias hgtyp='hg rrev Main/Assets/Activities/VideoWatching/Resources/Materials/ Main/ProjectSettings/ Main/Assets/Activities/Tabletop/Resources/Materials/TableMaterials/PodiumFlash.mat'

tp() {
    tmux split-window -h "$@"
}

tess() {
    temp_file=$(mktemp)
    echo $temp_file
    cat > $temp_file
    tmux split-window -h "cat $temp_file | less; rm $temp_file"
}
